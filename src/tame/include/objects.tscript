extend object o_compass
{
	onPlayerBrowse()
	{
		... "A compass.";
	}

	override function OnExamineFirst()
	{
		... `Your compass. Pretty handy for filling important plot holes, for instance, how you
			know which direction everything is in. If only it filled the hole that you fell in moments ago.`;
	}

	override function OnExamineNext()
	{
		... "It's your compass.";
	}

	onAction(a_use)
	{
		... "Technically, you're constantly using it. It's helping you find your bearings!";
	}

}

action transitive a_turnoff named "turn off", "switch off";

extend object o_flashlight
{
	onPlayerBrowse()
	{
		if (_examined)
			... "A flashlight. Or torch. Whatever.";
		else
			... "A flashlight.";
	}

	override function OnExamineFirst()
	{
		... `It's a flashlight that doesn't run out of power, and fills another important plot hole - how you can
			see in this dark, musty dungeon. Some people call it a "torch," though. You don't care, either way.`;
	}

	override function OnExamineNext()
	{
		... `It's your flashlight. Or torch. Whatever.`;
	}

	onAction(a_use)
	{
		if (!used)
			... `You're always using it. Sometimes you like to pretend you're some kind of Jedi when 
				you wave it around on foggy days. VZZOOOOM! VROWWWWMM!`;
		else
			... "It's always active. It's how you can see.";
		used = true;
	}

	onAction(a_turnoff)
	{
		... "Don't do that! There might be a grue down here!";
	}
}

extend object o_exitdoor
{
	onElementBrowse(r_northwestroom)
	{
		... "There's a big door here, blocking the way north.";
	}

	override function OnExamineFirst()
	{
		GiveObject(room, o_exitdoorplacard);
		GiveObject(room, o_exitdoorkeyhole);
	}

	override function OnExamineEvery()
	{
		... "It's a big door with a shiny placard on it, and a big keyhole.";
	}

	onActionWith(a_use, o_exitkey)
	{
		Passages.YouWin();
		quit;
	}

	function _use()
	{
		if (usedonce)
			... "It's still locked.";
		else
			... "You pull with all your might, but it doesn't budge. Looks like it's locked.";
		usedonce = true;
	}

	onAction(a_use)
	{
		_use();
	}

	onAction(a_open)
	{
		_use();
	}

}

extend object o_exitdoorplacard
{
	override function OnExamineFirst()
	{
		... `It reads, "Those who chase their tails are not necessarily lost." What the hell does that even mean?!`;
	}

	override function OnExamineNext()
	{
		... `"Those who chase their tails are not necessarily lost." Ugh. Whoever wrote this was just trying to sound smart.`;
	}
}

extend object o_exitdoorkeyhole
{
	override function OnExamineFirst()
	{
		... `You peer through the keyhole. Hey - there's some sunlight being cast in the hallway through there! 
			This must be the door to the outside!`;
	}

	override function OnExamineNext()
	{
		... "Through this door is freedom. Now to find the key.";
	}

	onActionWith(a_use, o_exitkey)
	{
		queue a_use, o_exitdoor, o_exitkey;
	}

}

extend object o_ouroboros
{
	onElementBrowse(r_northwestroom)
	{
		if (!_examined)
			... `There is a painting of some kind of snake eating its tail hanging on the west wall.`;
		else
			... `There is a painting of an Ouroboros hanging on the west wall.`;
		if (world.cycled)
			... `Looking at it makes you ANGRY.`;
	}

	override function OnExamineFirst()
	{
		... `It's an old, wood-framed oil-on-canvas painting of a snake encircling an eye, such that its head meets
			its tail, its mouth agape like it was going to eat it.`;
		... "A tiny plaque on the bottom part of the painting reads,";
		... "OUROBOROS - The snake that eats itself.";
		
		AddObjectName(this, "ouroboros");
		AddObjectName(this, "ouroboros painting");
		AddObjectName(this, "painting of ouroboros");
		AddObjectName(this, "painting of an ouroboros");
	}

	override function OnExamineNext()
	{
		if (world.cycled)
			... "It's the painting of an Ouroboros. You're so mad, you could PUNCH it!";
		else
			... "It's the painting of an Ouroboros. Ominous.";
	}

	onAction(a_punch)
	{
		if (world.cycled)
		{
			... `Using all your guts and grit and maybe a third word that begins with "G" that the
				author was too lazy to think of, you go to plunge your fist into the painting...`;
			wait(1000);
			... "... and it gives. What?";
			pause();
			... "You feel a place in the wall behind the painting that was dug away.";
			... "You move your hand around a bit, and you feel something heavy and cold.";
			pause();
			... "You pull it out of the hole you made in the painting. IT'S A KEY!";
			... "You take the Big Key.";
			GiveObject(player, o_exitkey);
			RemoveObject(o_ouroboros);
			GiveObject(room, o_punchedouroboros);
			punched = true;
		}
		else
			... "Why ruin a perfectly good painting?";
	}

}

extend object o_punchedouroboros
{
	onElementBrowse(r_northwestroom)
	{
		if (!o_ouroboros._examined && !_examined)
			... "There is a punched painting of some kind of snake eating its tail hanging on the west wall.";
		else
			... "There is a punched painting of an Ouroboros hanging on the west wall.";
	}

	override function OnExamineFirst()
	{
		... `It's an old, wood-framed oil-on-canvas painting of a snake encircling an eye, such that its head meets
			its tail, its mouth agape like it was going to eat it.`;
		... `A tiny plaque on the bottom part of the painting reads,`;
		... "";
		... `OUROBOROS - The snake that eats itself`;
		... "";
		... `"More like 'the snake that ate my fist,'" you say out loud to nobody.`;
	}

	override function OnExamineNext()
	{
		... "It's the painting of an Ouroboros. Good riddance.";
	}

	onAction(a_punch)
	{
		... "It's already punched. You think it learned its lesson.";
	}

}

extend object o_exitkey
{
	onPlayerBrowse()
	{
		... "A big key.";
	}

	override function OnExamineEvery()
	{
		... "It's the key to getting out of the damn place.";
	}
}

extend object o_ironkey
{
	onRoomBrowse()
	{
		... "There's a small iron key, here.";
	}

	onPlayerBrowse()
	{
		... "A small iron key.";
	}

	override function OnExamineFirst()
	{
		... `It's a small key made of iron. It's a little rusty, but then again, with your adventuring
		    prowess, who are you to judge?`;
	}

	override function OnExamineNext()
	{
		... "It's a small key made of iron.";
	}

}

action transitive a_stepon named "step on";

extend object o_floorplate
{
	onRoomBrowse()
	{
		... "There's some kind of a floorplate or slab protruding from the floor.";
	}

	onAction(a_stepon)
	{
		queue a_use, this;
	}

	override function OnExamineEvery()
	{
		... "It's some kind of a floorplate. Maybe it's attached to some kind of counterweight system?";
	}

	onAction(a_use)
	{
		... "You step on the floor plate.";
		if (!used)
		{
			... "As it sinks, you hear something metallic hit the floor in the room to the NORTH of you.";
			... "You should probably GO there.";
			GiveObject(r_northwestroom, o_ironkey);
			used = true;
		}
		else
		{
			... "Nothing happens.";
		}
	}

}

extend object o_irondoor
{
	onRoomBrowse()
	{
		... "There's a big iron door, here.";
	}

	override function OnExamineEvery()
	{
		... "It's a big, heavy iron door with a tiny keyhole in the center of it.";
		if (!_examined)
		{
			... "Somebody didn't want you to go this way. Or maybe they did, and they want you to find the key.";
			... "Probably the latter.";
		}
	}

	onAction(a_take)
	{
		... `You may not have worked out in a while, but even if you did, you don't think you
			can take that door, much less carry it around with you.`;
		... "";
		... "But your confidence is admirable.";
	}

	onAction(a_use)
	{
		... "It's locked. You'll need a key to unlock it.";
	}

	onActionWith(a_use, o_ironkey)
	{
		RemoveObject(o_irondoor);
		RemoveObject(o_ironkey);
		... "You put the key into the door's keyhole, and the key and door magically vanish.";
		... "You are like, 95% percent sure doors don't do that, but whatever. It's not there, anymore.";
	}

	onAction(a_open)
	{
		queue a_use, this;
	}

}

extend object o_portal
{
	onRoomBrowse()
	{
		... "A swirling portal is here, on the west wall.";
	}

	override function OnExamineEvery()
	{
		... "It's the portal that appeared after you put your trusty compass on the pedestal.";
		... "Seems foolhardy to not walk through it, don't you think? I mean, you came all this way...";
	}

	onAction(a_use)
	{
		queue a_gowest;
	}
}

extend object o_pedestal
{
	OnRoomBrowse()
	{
		... "There's a bronze pedestal here, near the west wall of the room.";
	}

	override function OnExamineFirst()
	{
		... `It's a bronze pedestal that's about waist-high, with a rectangular tablet 
			on the top, as though it's expecting something to be placed on it.`;
		... `A plaque on it reads, "Discard your sense of direction."`;
		... "Who the hell keeps writing these plaques?";
	}

	override function OnExamineNext()
	{
		... `"Discard your sense of direction."`;
	}

	// "place compass on pedestal"
	onActionWith(a_placeon, o_compass)
	{
		queue a_use, o_pedestal, o_compass;
	}

	onActionWith(a_use, o_compass)
	{
		RemoveObject(o_pedestal);
		RemoveObject(o_compass);
		GiveObject(room, o_portal);
		... `You place the compass on the pedestal, which starts glowing, and then vanishes, 
			along with your compass. And then, after a flash of light, a churning, swirling portal on
			the west wall suddenly appears.`;
	}

}

extend object o_basin
{
	override init()
	{
		inittags();
		stone = false;
	}

	OnRoomBrowse()
	{
		... "There's some kind of a basin here in the center of the room.";
	}

	override function OnExamineFirst()
	{
		... "The basin is made of what looks like ivory, and in the bowl-like cavity is a shimmering liquid.";
		... "Is it alabaster? Mercury? Whatever it is, it looks too weird and dangerous to touch, that's for sure.";
		... "The ivory, however, does not seem to react to it.";
	}

	override function OnExamineNext()
	{
		... "It's an ivory basin that contains a weird shimmering liquid.";
	}

	override onActionWithOther(a_use)
	{
		... "That may be dangerous. You decide against it.";
	}

	function StoneCheck()
	{
		if (stone !== false)
		{
			... "One thing in that basin's enough - let's not push the weird liquid too hard, okay?";
			return false;
		}
		return true;
	}

	onAction(a_use)
	{
		... `To do what? You should probably use some tools for interacting with this thing. 
			It looks pretty dangerous.`;
	}

	onActionWith(a_use, o_smoothstone)
	{
		if (StoneCheck())
		{
			RemoveObject(o_smoothstone);
			stone = identity(o_smoothstone);
			... "You drop the smooth stone into the basin. Bye, bye, stone.";
			... "Hmm... it looks like the liquid is reacting to it.";
		}
	}

	onActionWith(a_use, o_jaggedstone)
	{
		if (StoneCheck())
		{
			RemoveObject(o_jaggedstone);
			stone = identity(o_jaggedstone);
			... "You drop the jagged stone into the basin. Nice knowing ya, stone.";
			... "Hmm... it looks like the liquid is reacting to it.";
		}
	}

	onActionWith(a_use, o_cup)
	{
		... "You carefully dip the cup into the liquid. Now you have a cup full of the weird stuff.";
		RemoveObject(o_cup);
		GiveObject(player, o_liquidcup);
	}

	onActionWith(a_use, o_ladle)
	{
		... "You dip the ivory ladle into the basin of weird liquid...";
		if (stone === identity(o_jaggedstone))
		{
			GiveObject(player, o_ruby);
			... "...and come up with a ruby! Jackpot! You pocket it after all of the weird liquid drips off of it.";
			stone = false;
		}
		else if (stone === identity(o_smoothstone))
		{
			GiveObject(player, o_sapphire);
			... "...and come up with a sapphire! Sweet! You pocket it after all of the weird liquid drips off of it.";
			stone = false;
		}
		else
		{
			... "...and come up with nothing. There's nothing in the liquid.";
		} 
	}

	onActionWith(a_use, o_ruby)
	{
		... "Nah. It probably had a good enough bath when it was a nondescript stone.";
	}

	onActionWith(a_use, o_sapphire)
	{
		... "Nah. It probably had a good enough bath when it was a nondescript stone.";
	}

}

extend object o_cup
{
	override Init()
	{
		InitTags();
		filled = false;
	}

	OnPlayerBrowse()
	{
		if (_examined)
			... "An ivory cup.";
		else
			... "A cup.";
	}

	override function OnExamineEvery()
	{
		... "It's a small cup - looks like it's made of ivory.";
	}

	override function OnTake()
	{
		... "Looks like he won't be needing this anymore. Yoink!";
		o_statue.hasCup = false;
	}

}

extend object o_ladle
{
	OnPlayerBrowse()
	{
		if (_examined)
			... "An ivory ladle.";
		else
			... "A ladle.";
	}

	override function OnExamineEvery()
	{
		... "It's a ladle with a short handle, and... holes in it? What good is that?";
		... "It's made of ivory, though.";
	}

	override function OnTake()
	{
		... "You take ladle out of the statue's hand. It was surprisingly easy.";
		... "Well, mostly because it can't grab it back.";
		o_statue.hasLadle = false;
	}

}

extend object o_statue
{
	override Init()
	{
		InitTags();
		hasCup = true;
		hasLadle = true;
	}

	OnRoomBrowse()
	{
		... "A statue of a man sitting on a short pedestal is near the eastern wall.";
		if (hasCup || hasLadle)
		{
			if (hasCup)
				... "He has a cup in his left hand."; 
			if (hasLadle)
				... "He has a ladle in his right hand."; 
		}
	}

	override function OnExamineEvery()
	{
		... "It's a statue of a man sitting, legs folded, on top of a short base about knee-high.";
		... `Below him, on the base, a chiseled inscription reads, "Man Who is Always Thirsty"`;
		if (!_examined)
		{
			... `Not sure if there's a greater meaning here. Maybe whoever made this dungeon was just
				trying to make sense of why there's a statue of a man with a cup and ladle. Yeah, that's
				probably it.`;
		}
		if (hasCup)
			... "He has a cup in his left hand."; 
		if (hasLadle)
			... "He has a ladle in his right hand."; 
	}

}

extend object o_jaggedstone
{
	OnRoomBrowse()
	{
		... "There's a jagged stone on the floor here.";
	}

	OnPlayerBrowse()
	{
		... "A jagged stone.";
	}

	override function OnExamineEvery()
	{
		... "It's a weird, jagged stone. It looks like there's flecks of something red in it.";
	}
}

extend object o_smoothstone
{
	OnRoomBrowse()
	{
		... "There's a smooth stone in the water here that catches your attention.";
	}

	OnPlayerBrowse()
	{
		... "A smooth stone.";
	}

	override function OnExamineEvery()
	{
		... "It's a cool, smooth stone. It looks like there's flecks of something blue in it.";
	}

}

extend object o_ruby
{
	OnPlayerBrowse()
	{
		... "A ruby.";
	}

	override function OnExamineEvery()
	{
		... "It's a dazzlngly red ruby. You wonder how valuable this thing is.";
	}

}

extend object o_sapphire
{
	OnPlayerBrowse()
	{
		... "A sapphire.";
	}

	override function OnExamineEvery()
	{
		... "It's a beautifully blue sapphire. You wonder how valuable this thing is.";
	}
}

extend object o_magentaeyedoor
{
	OnRoomBrowse()
	{
		... "There's a large door with a magenta-colored eye painted on it in the north wall.";
	}

	override function OnExamineEvery()
	{
		... "It's a large, stone door with a magenta-colored eye painted on it. It is blocking your way north. Stupid door!";
	}

	onAction(a_use)
	{
		... "This is probably connected to something else in the room, and cannot be opened directly.";
	}

	onAction(a_open)
	{
		queue a_use, this;
	}

}

extend object o_insets
{
	override Init()
	{
		InitTags();
		hasRuby = false;
		hasSapphire = false;
	}

	OnRoomBrowse()
	{
		... `There are a pair of stands in the center of the room, each with some kind of
			small inset at the tops of them.`;
		if (hasRuby)
		{
			... "A ruby is placed in one of the stands.";
		}
		if (hasSapphire)
		{
			... "A sapphire is placed in one of the stands.";
		}

	}

	override function OnExamineEvery()
	{
		... "The pair of metallic stands sit about a foot away from each other, parallel with the surface of the door.";
		if (hasRuby)
		{
			... "A ruby is placed in one of the stands.";
		}
		if (hasSapphire)
		{
			... "A sapphire is placed in one of the stands.";
		}
	}

	onActionWith(a_use, o_ruby)
	{
		hasRuby = true;
		RemoveObject(o_ruby);
		... `You put the ruby in one of the insets. It grabs it like a hand. Looks like you 
			aren't getting it back.`;
	}

	onActionWith(a_use, o_sapphire)
	{
		hasSapphire = true;
		RemoveObject(o_sapphire);
		... `You put the sapphire in one of the insets. It grabs it like a hand. Looks like you
			aren't getting it back.`;
	}

}

extend object o_prisms
{
	OnRoomBrowse()
	{
		... "A pair of prisms are here.";
	}

	override function OnExamineEvery()
	{
		... `The prisms are on stands, equal in height to the other stands in the room, such that
			if light were shown through them, it would shine across the stands with insets and onto the door
			on the opposite side.`;
	}

	onActionWith(a_use, o_flashlight)
	{
		local ft = o_flashlight._examined ? "flashlight (torch?)" : "flashlight";
		... `You shine your {0} at the prisms. The light is refracted and focused
			such that it passes over the insets on the stands and onto the door.`, ft;
		if (o_insets.hasRuby && o_insets.hasSapphire)
		{
			... `The door is bathed in a magenta color. You hear a rumble, and the door slides
				into the floor.`;
			RemoveObject(o_magentaeyedoor);
		}
		else if (o_insets.hasRuby)
			... "The door is bathed in a pale red color, but nothing happens.";
		else if (o_insets.hasSapphire)
			... "The door is bathed in a pale blue color, but nothing happens.";
		else
			... "The door is bathed in white light, but nothing happens.";
	}

}

action strict reversed ditransitive a_pouron named "pour" uses conjunctions "on";

extend object o_liquidcup
{
	OnPlayerBrowse()
	{
		... "A cup filled with weird liquid.";
	}

	override function OnExamineEvery()
	{
		... `It's an ivory cup filled with some kind of liquid that you scooped out of that
			ivory basin. Careful not to drop it - you don't know what that stuff can do.`;
	}

	onActionWithOther(a_pouron)
	{
		... "That would probably not be a good idea.";
	}

	override onActionWithOther(a_use)
	{
		... "That would probably not be a good idea.";
	}

}

extend object o_stonestatue
{
	OnRoomBrowse()
	{
		... `A giant stone statue of a snake coiled up and eating its own tail
			sits in the center of the room.`;
	}

	override function OnExamineEvery()
	{
		... "The statue is made of stone, but the pedestal its on is ivory.";
		... `Engraved in the ivory are the words: "Help Me Show My True Color".`;
	}

	onActionWith(a_use, o_liquidcup)
	{
		... `You carefully pour the shimmering liquid over the statue, and it starts to slowly
			turn an emerald green. The big stone door slides into the floor revealing the way forward.`;
		RemoveObject(o_stonedoor);
		RemoveObject(o_stonestatue);
		GiveObject(room, o_emeraldstatue);
		RemoveObject(o_liquidcup);
		GiveObject(player, o_cup);
	}

	onActionWith(a_pouron, o_liquidcup)
	{
		queue a_use, o_stonestatue, o_liquidcup;
	}

}

extend object o_emeraldstatue
{
	OnRoomBrowse()
	{
		... "A giant emerald statue of a snake coiled up and eating its own tail sits in the center of the room.";
	}

	override function OnExamineEvery()
	{
		... "The statue that was once stone is now emerald.";
	}

	onAction(a_take)
	{
		... "It'd fetch a pretty penny on the market, but good luck lugging this thing out of here.";
	}

	onActionWith(a_pouron, o_liquidcup)
	{
		queue a_use, o_emeraldstatue, o_liquidcup;
	}

	onActionWith(a_use, o_liquidcup)
	{
		... "It's probably had enough.";
	}

}

extend object o_stonedoor
{
	OnRoomBrowse()
	{
		... "A big stone door blocks the way west.";
	}

	override function OnExamineEvery()
	{
		... "It's a big honkin' stone door. The kind of honkin' stone doors that block ways. YOUR way, as a matter of fact.";
	}
}
